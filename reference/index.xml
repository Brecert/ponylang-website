<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>References on Pony</title>
    <link>http://www.ponylang.org/reference/index.xml</link>
    <description>Recent content in References on Pony</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Pony Developers</copyright>
    <atom:link href="http://www.ponylang.org/reference/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pony LLDB Cheatsheet</title>
      <link>http://www.ponylang.org/reference/pony-lldb-cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.ponylang.org/reference/pony-lldb-cheatsheet/</guid>
      <description>

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;h3 id=&#34;macos-setup&#34;&gt;macOS Setup&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% brew install llvm@3.9
% sudo /usr/sbin/DevToolsSecurity --enable
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;

&lt;h3 id=&#34;official-lldb-tutorial&#34;&gt;Official LLDB tutorial&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://lldb.llvm.org/tutorial.html&#34;&gt;http://lldb.llvm.org/tutorial.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;gdb-lldb-rosetta-stone&#34;&gt;GDB &amp;lt;&amp;ndash;&amp;gt; LLDB Rosetta Stone&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://lldb.llvm.org/lldb-gdb.html&#34;&gt;http://lldb.llvm.org/lldb-gdb.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;building-a-debuggable-executable&#34;&gt;Building a Debuggable Executable&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% ponyc --debug
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;running-an-executable&#34;&gt;Running an Executable&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% lldb EXECUTABLE -- arg1 arg2 arg3 …
% lldb -- EXECUTABLE arg1 arg2 arg3 ...
(lldb) run
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setting-breakpoints&#34;&gt;Setting Breakpoints&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(lldb) breakpoint set --file foo.c --line 12
(lldb) breakpoint set --name foo 
(lldb) b foo.c:12
(lldb) b Main_create
(lldb) b map.pony:73
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When using a file name/line combination to set the breakpoint, you can specify any file in the program without having to specify a path to that file, as long as the file name is unambiguous.&lt;/p&gt;

&lt;h3 id=&#34;list-breakpoints&#34;&gt;List Breakpoints&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(lldb) breakpoint list
(lldb) b
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;backtrace&#34;&gt;Backtrace&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(lldb) thread backtrace
(lldb) bt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you would like to limit the size of the backtrace (for example, when you are debugging a case of runaway recursion that blows out the stack and generates a very long backtrace), you can use the &lt;code&gt;--count&lt;/code&gt; or &lt;code&gt;-c&lt;/code&gt; option to specify the number of frames to print, starting with the most recent one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(lldb) thread backtrace --count 5
(lldb) b -c 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stepping&#34;&gt;Stepping&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(lldb) thread step-in
(lldb) thread step-over
(lldb) thread step-out
(lldb) thread step-into
(lldb) thread until LINE
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;frame&#34;&gt;Frame&lt;/h3&gt;

&lt;p&gt;Select a frame:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(lldb) frame select NUMBER
(lldb) f NUMBER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show the variables in the current frame:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(lldb) frame variable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show a specific variable from the current frame:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(lldb) frame variable VARIABLE
(lldb) p VARIABLE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pointer, array, structure, and cast operation from C can be applied to frame variables.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&amp;amp;variable&lt;/dt&gt;
&lt;dd&gt;address of a variable&lt;/dd&gt;
&lt;dt&gt;*variable&lt;/dt&gt;
&lt;dd&gt;dereference a pointer&lt;/dd&gt;
&lt;dt&gt;variable.field&lt;/dt&gt;
&lt;dd&gt;access a field within a structure&lt;/dd&gt;
&lt;dt&gt;pointer_variable-&amp;gt;field&lt;/dt&gt;
&lt;dd&gt;access a field within a structure pointed to by a pointer&lt;/dd&gt;
&lt;dt&gt;array_pointer[index]&lt;/dt&gt;
&lt;dd&gt;access an index within an array&lt;/dd&gt;
&lt;dt&gt;(type_t *)variable&lt;/dt&gt;
&lt;dd&gt;cast variable to a pointer to a type_t&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;h3 id=&#34;example-examining-an-object&#34;&gt;Example: Examining an object&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(lldb) frame variable
(OscMessage *const) this = &amp;lt;variable not available&amp;gt;
(Array_U8_val *) parts = 0x0000000108fcf4c0
(OscString *) oscAddress = &amp;lt;variable not available&amp;gt;
(OscString *) types = 0x00007fff5fbff878
(lldb) frame variable *types
(OscString) *types = {
  _data = 0x0000000108fcf560
}
(lldb) frame variable *types-&amp;gt;_data
(String) *types-&amp;gt;_data = (_size = 2, _alloc = 3, _ptr = &amp;quot;,f&amp;quot;)

(ponytest_TestHelper *) this = 0x0000000110ff5020
(lldb) p this
(ponytest_TestHelper *) $2 = 0x0000000110ff5020
(lldb) p *$2
(ponytest_TestHelper) $3 = {
  _runner = 0x0000000110ff7200
  env = 0x0000000108ffec00
}
(lldb) p $3.env
(Env *) $4 = 0x0000000108ffec00
(lldb) p *$4
(Env) $5 = {
  root = 0x000000010004f3e0
  input = 0x0000000108fd6800
  out = 0x0000000108fff500
  err = 0x0000000108fff600
  args = 0x0000000108fd6400
  _envp = 0x00007fff5fbffa98
  _vars = 0x000000010004f3b0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;p&lt;/code&gt; lets you work from the resulting lldb temporary variables, which can be very convenient when you want to examine an intermediate result.&lt;/p&gt;

&lt;h3 id=&#34;example-printing-a-string&#34;&gt;Example: Printing A String&lt;/h3&gt;

&lt;p&gt;Assume you have a Pony String called &lt;code&gt;x&lt;/code&gt;. You can print the string like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(lldb) p (char *)(x-&amp;gt;_ptr)
(char *) $3 = 0x00000001000106f8 &amp;quot;abc&amp;quot;
(lldb)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-printing-the-values-in-an-array-of-numbers&#34;&gt;Example: Printing The Values In An Array Of Numbers&lt;/h3&gt;

&lt;p&gt;Assume you have an &lt;code&gt;Array[U64]&lt;/code&gt; called &lt;code&gt;x&lt;/code&gt; with 6 elements. You can print the values of the values of the elements like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(lldb) p *(long(*)[6])(x-&amp;gt;_ptr)
(long [6]) $3 = ([0] = 1, [1] = 2, [2] = 3, [3] = 4, [4] = 5, [5] = 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can adjust the type (&lt;code&gt;long&lt;/code&gt;) to appropriately print the types that correspond to the array values, and adjust the size (&lt;code&gt;6&lt;/code&gt;) to print more or fewer of the elements.&lt;/p&gt;

&lt;h2 id=&#34;pony-stuff&#34;&gt;Pony Stuff&lt;/h2&gt;

&lt;h3 id=&#34;method-name-mangling&#34;&gt;Method Name Mangling&lt;/h3&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Future breakage possible!&lt;/p&gt;
&lt;p&gt;While currently necessary for some debugging, you should know that name mangling might change in the future. Do not depend on this remaining static.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Method names get mangled by the compiler. The general format for the mangling is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;package_&amp;gt;type&amp;lt;_typearg1_typearg2&amp;gt;_rcap_methodname_mangling&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the above:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;package&lt;/dt&gt;
&lt;dd&gt;the name of the package (for methods brought in through use expressions)&lt;/dd&gt;
&lt;dt&gt;type&lt;/dt&gt;
&lt;dd&gt;the name of the type to which the method belongs&lt;/dd&gt;
&lt;dt&gt;typearg1, typearg2 …&lt;/dt&gt;
&lt;dd&gt;the type parameters of the method (for methods that use type parameters)&lt;/dd&gt;
&lt;dt&gt;rcap&lt;/dt&gt;
&lt;dd&gt;the reference capability of the method&lt;/dd&gt;
&lt;dt&gt;methodname&lt;/dt&gt;
&lt;dd&gt;the name of the method&lt;/dd&gt;
&lt;dt&gt;mangling&lt;/dt&gt;
&lt;dd&gt;a mangling string where each character indicates the type of each method parameter and the method’s return type according to the following conversion:&lt;/dd&gt;
&lt;/dl&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Mangling&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;o&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Bool&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;I8&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;I16&lt;/td&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;I32&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;I64&lt;/td&gt;
&lt;td&gt;w&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;I128&lt;/td&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ILong&lt;/td&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ISize&lt;/td&gt;
&lt;td&gt;z&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;U8&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;U16&lt;/td&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;U32&lt;/td&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;U64&lt;/td&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;U128&lt;/td&gt;
&lt;td&gt;Q&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ULong&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;USize&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;F32&lt;/td&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;F64&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These rules can be used to determine the name of function in order to specify that you would like to place a breakpoint on it. You can also type &lt;code&gt;b &amp;lt;characters&amp;gt;&amp;lt;tab&amp;gt;&lt;/code&gt; to see a tab-complete list of all the available functions that start with &lt;code&gt;&amp;lt;characters&amp;gt;&lt;/code&gt;. To set a breakpoint on a function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(lldb) breakpoint set --name Bar_foo
(lldb) b Bar_foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;calling-methods&#34;&gt;Calling Methods&lt;/h3&gt;

&lt;p&gt;As of April 5, 2017, &lt;a href=&#34;https://github.com/ponylang/ponyc/issues/1813&#34;&gt;issue #1813&lt;/a&gt; is preventing this from working.&lt;/p&gt;

&lt;h3 id=&#34;behaviors-and-messages&#34;&gt;Behaviors and Messages&lt;/h3&gt;

&lt;p&gt;Each behavior has an associated send method (&lt;mangled_behavior_function_name&gt;__send) that is used to send a message to the receiver to trigger that behavior. Each actor has a dispatch method (&lt;actor&gt;_Dispatch) that translates messages into calls to the appropriate functions in the receiver.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>http://www.ponylang.org/reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.ponylang.org/reference/</guid>
      <description>

&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ponylang.org/reference/pony-lldb-cheatsheet/&#34;&gt;Pony LLDB Cheatsheet&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>